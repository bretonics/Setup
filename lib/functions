#!/usr/bin/env bash

#===============================================================================================
# HELPER FUNCTIONS
#===============================================================================================

# Global Variables
BASE_PATH="$(dirname $(dirname $0))"
source ${PARENT_PATH}/lib/globals

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Adds Bash Completions
addBashCompletions() {
    isBash
    if [ $? -ne 0 ]; then return; fi

    ask "Install additional Bash completions"
    if [ $RESPONSE != true ]; then return; fi

    brew install bash-completion

    # Add bash-completions sourcing
    echo "[[ -r \"/usr/local/etc/profile.d/bash_completion.sh\" ]] && . \"/usr/local/etc/profile.d/bash_completion.sh\"" >> ${SHELL_PROFILE_FILE}
    BASH_COMPLETIONS_INSTALLED=true

    ask "Add Git Completion"
    if [ "$RESPONSE" = true ]; then
        ln -s /Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash /usr/local/etc/bash_completion.d/
    fi

    ask "Add NPM Completion"
    if [ "$RESPONSE" = true ]; then
        npm completion > /usr/local/etc/bash_completion.d/npm
    fi
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Adds Homebrew Taps
# - List in $BREW_TAPS_FILE
addTaps() {
    subsection "Adding Homebrew Taps"

    while read -r tap; do
        echo "Adding tap ${tap}"
        brew tap ${tap}
    done < $BREW_TAPS_FILE

    message "DONE adding Homebrew taps"
    sleep 2
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Adds Appropriate Shell Completions
addShellCompletions() {
    subsection "Shell Completions"

    ask "Configure shell completions"
    if [ $RESPONSE != true ]; then return; fi

    isZsh
    if [ $? -eq 0 ]; then
        addZshCompletions
    fi

    isBash
    if [ $? -eq 0 ]; then
        addBashCompletions
    fi
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Add and Source Homebrew Install
addHomebrewPath() {
    if [ ${IS_APPLE_CPU} ]; then
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ${SHELL_PROFILE_FILE}
        eval "$(/opt/homebrew/bin/brew shellenv)"
    fi
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Adds Zsh Completions
addZshCompletions() {
    isZsh
    if [ $? -ne 0 ]; then return; fi

    # Setup appropriate sourcing
    echo "autoload -Uz compinit && compinit" >> ${ZSH_RC_PATH}

    # Hugo
    hugo completion zsh > /usr/local/share/zsh/site-functions/_hugo

    rm ~/.zcompdump # clean up
    source ${ZSH_RC_PATH}
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ask User Response
# - $2: If anything truthy passed (1), explicitly ask
ask() {
    if [ "${DEFAULTS}" == true ] && [ -z ${2} ]; then
        RESPONSE=true
    else
        echo -en "\n${1} (y/n)? "
        read -n 1 -r
        case "${REPLY}" in
            y|Y)
                RESPONSE=true
                echo ""
                ;;
            n|N|*)
                RESPONSE=false
                message info "Skipping..."
                ;;
        esac
    fi
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Clean Up
cleanUp() {
    subsection "Cleaning up system"

    echo -e "Turning OFF sending brew analytics\n"
    brew analytics off

    echo -e "Cleaning up Homebrew downloads and caches\n"
    brew cleanup -s # remove older versions in cellar + old downloads-cache
    rm -rf $(brew --cache) # delete all

    message "DONE cleaning up"
    sleep 2
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Does Command Exist?
commandExists() {
	command -v "$1" >/dev/null 2>&1 || message error "$1 is required but it's not installed." >&2; false;
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Configure Git
configureGit() {
    subsection "Git"

    ask "Configure Git"
    if [ $RESPONSE != true ]; then return; fi

    # git config --global pull.rebase true
    ask "Using name: '${USER_NAME}'. Is this correct" 1
    if [ "$RESPONSE" = true ]; then
        git config --global user.name "${USER_NAME}"
    else
        printf "\nPlease enter your full name: "
        read GIT_NAME && git config --global user.name "${GIT_NAME}"
    fi

    printf "\nEnter your email: "
    read GIT_EMAIL && git config --global user.email "${GIT_EMAIL}"

    echo -e "\n\nGit Configured"
    echo -e "Name: $(git config --get user.name)"
    echo -e "Email: $(git config --get user.email)\n"

    if [ $BASH_COMPLETIONS_INSTALLED = true ]; then
        ask "Do you want to enable Git prompt status (PS1)"
        if [ $RESPONSE != true ]; then return; fi

        if [ ${DEFAULT_SHELL} = "bash" ]; then
            ln -s ${GIT_PROMPT_PATH} ~/
            echo -e "\nAdd \"__git_ps1 ' (%s)'\" in your PS1 where you'd like to see the git status"
        fi

        # TODO: figure out which way is best for Zsh
        # NOTE: already taken care of with Starship/Spaceship prompts. Is this gratuitous?
    fi
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Configure GPG - OpenPGP Encryption
configureGPG() {
    subsection "GPG Key"

    ask "Create GPG Key"
    if [ $RESPONSE != true ]; then return; fi

    gpg --gen-key
    GPGkey=$(gpg --list-secret-keys --keyid-format LONG | sed -nE 's/sec.*rsa2048\/([a-zA-Z0-9]+).*/\1/p')

    echo -e "\nConfiguring GPG Key with resources\n"
    git config --global user.signingkey ${GPGkey} # configure Git to use GPG
    gpg --armor --export ${GPGkey} | pbcopy

    echo -e "\n\nGPG key copied to clipboard.\n"
    unset GPGkey
    echo -e "GitHub will now open. Paste GPG key copied to your clipboard and come back here to continue.\n"
    sleep 3
    open ${GITHUB_KEYS_URL}
    read -p "Waiting on user to return. Press to continue... "
    pbcopy < /dev/null # clear clipboard

    message "Done running workspace personalizations"
    sleep 2
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Configure SSH
configureSSH() {
    subsection "SSH Keys"

    ask "Create SSH Keys"
    if [ $RESPONSE != true ]; then return; fi

    mkdir ~/.ssh
    cp -v ./files/shell/ssh_config ~/.ssh/config
    ssh-keygen -t rsa -f ~/.ssh/${GITHUB_RSA_NAME}
    cat ~/.ssh/${GITHUB_RSA_NAME}.pub | pbcopy

    echo -e "\n\nSSH public key copied to clipboard.\n"
    echo -e "GitHub will now open. Paste PUBLIC SSH key copied to your clipboard and come back here to continue.\n"
    sleep 3
    open ${GITHUB_KEYS_URL}
    read -p "Waiting on user to return. Press to continue... "
    pbcopy < /dev/null # clear clipboard
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Copy Files
copyFiles() {
    subsection "Files"

    ask "Copy .bash_profile"
    if [ "$RESPONSE" = true ]; then
        cp ./files/bash/.bash_profile ~/
        cp ./files/shell/.shell_colors ~/
    fi

    ask "Copy .bashrc"
    if [ "$RESPONSE" = true ]; then
        cp ./files/bash/.bashrc ~/
    fi

    ask "Copy .bash_functions"
    if [ "$RESPONSE" = true ]; then
        cp ./files/bash/.bash_functions ~/
    fi

    ask "Initialize crontab"
    if [ "$RESPONSE" = true ]; then
        crontab ./files/shell/crontab
    fi

    echo -e "Sourcing .bash_profile\n"
    source ${BASH_PROFILE_PATH}
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Divider Block Divider
divider() {
    echo -e "\n\n${1}\n--------------------------------------------------------------------------------\n"
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get Apple ID Username (email)
getAccountId() {
    defaults read MobileMeAccounts Accounts | sed -n -e 's/.*AccountID = \"\(.*\)\"\;/\1/p'
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Completed Message
footer() {
    echo ""
    echo ""
    echo "================================================================================"
    echo "| ${1} setup has FINISHED"
    echo "| Script:    $(basename "$0")"
    echo "| User:      $(whoami)"
    echo "| Date:      $(date)"
    echo "| PWD:       $(pwd)"
    echo "| PID:       $$"
    echo "================================================================================"
    echo ""
    echo ""
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Header Message
header() {
    echo ""
    echo ""
    echo "================================================================================"
    echo "| Script:    $(basename "$0")"
    echo "| User:      $(whoami)"
    echo "| Date:      $(date)"
    echo "| PWD:       $(pwd)"
    echo "| PID:       $$"
    echo "|"
    echo "| Running '${SETUP_TYPE}' install..."
    echo "|     - Brewfile: ${BREW_FILE}"
    echo "|     - Mode: $(if [ -n "${MODE}" ]; then echo "${MODE}"; else echo "N/A"; fi)"
    echo "|     - Secondary: $(if [ ${RUN_SECONDARY} = "true" ]; then echo "Yes"; else echo "No"; fi)"
    echo "|"
    echo "================================================================================"
    echo ""
    echo ""
    echo ""
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Installs Mac App Store Applications
# - $1 argument: path to file listing Mac apps
# TODO: mojave install mas from tap for Mojave
installApps() {
    subsection "Installing Apps From Mac App Store"

    mas signin --dialog $(getAccountId)

    for app in $(sed -E -n 's/^([0-9]+)(.*)/\1/p' ${1:-}); do
        while read -r app; do
            echo "Installing $app"
            mas install $app
            echo ""
        done < ${1}
    done

    message "DONE installing Mac App Store apps"
    sleep 2
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Installs Homebrew Package Manager
installHomebrew() {
    subsection "Installing Homebrew Package Manager"

    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    addHomebrewPath

    # Automatically run cleanup every 7 days
    brew autoupdate start 604800 --cleanup

    message "DONE installing Homebrew"
    sleep 2
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Installs Homebrew Casks
# - $1 argument: path to file listing Homebrew casks
installCasks() {
    subsection "Installing Casks (3rd party apps)"

    while read -r cask; do
        echo "Installing ${cask}"
        brew install ${cask}
        echo ""
    done < ${1}

    message "DONE installing casks"
    sleep 2
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Installs Homebrew Formulae
# - $1 argument: path to file listing Homebrew formulae
installFormulae() {
    subsection "Installing Homebrew Formulae"

    while read -r formula; do
        echo "Installing ${formula}"
        brew install ${formula}
        echo ""
    done < ${1}

    message "DONE installing Homebrew formulae"
    sleep 2
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Installs Oh My Zsh Framework
installOMZ() {
    isZsh
    if [ $? -ne 0 ]; then return; fi

    subsection "Oh My Zsh Framework"

    ask "Install Oh My Zsh" 1
    if [ $RESPONSE != true ]; then return; fi

    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    if [ $? -ne 0 ]; then return; fi

    OMZ_INSTALLED=true
    message "DONE installing Oh My Zsh"
    sleep 2
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Installs NPM Packages
# - $1 argument: path to file listing npm packages
installNodePackages() {
    subsection "Installing Global NPM Packages"

    # OS Dependent Presets
    # Is this really necessary?
    # if [ "${IS_CATALINA}" = true ]; then
    #     echo -e "Setting NPM prefix\n"
    #     npm config set prefix /usr/local
    # fi

    while read -r package; do
        echo -e "\n\nInstalling ${package}"
        npm install -g ${package}
    done < ${1}

    message "DONE installing NPM packages"
    sleep 2
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Installs Pure Prompt
installPurePrompt() {
    isZsh
    if [ $? -ne 0 ]; then return; fi

    subsection "Pure Prompt"

    ask "Install Pure Prompt" 1
    if [ $RESPONSE != true ]; then return; fi

    brew install pure

    echo -e "\nType 'prompt pure' to select"
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Installs Powerlevel10K Prompt
# https://github.com/romkatv/powerlevel10k#installation
installPowerlevel10kPrompt() {
    isZsh
    if [ $? -ne 0 ]; then return; fi

    subsection "Powerlevel10k Prompt"

    ask "Install Powerlevel10K Prompt" 1
    if [ $RESPONSE != true ]; then return; fi

    # Use OhMyZsh or brew installation
    if [ $OMZ_INSTALLED = true ]; then
        git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
    else
        brew install romkatv/powerlevel10k/powerlevel10k
        echo "source $(brew --prefix)/opt/powerlevel10k/powerlevel10k.zsh-theme" >>~/.zshrc
    fi

    echo -e "\nYou may consider installing the recommended font, Meslo Nerd Font patched for Powerlevel10k: https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k\n"
    echo -e "\nType 'p10k configure' to start configuration wizard"
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Install Shell Prompts
installShellPrompts() {
    subsection "Shell Prompts"
    installPowerlevel10kPrompt
    installPurePrompt
    installStarshipPrompt
    installSpaceshipPrompt
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Installs Prompt Passed
# - $1 argument: prompt name
installShellPrompt() {
    case "${1}" in
        powerlevel10k*)
            installPowerlevel10kPrompt
            ;;
        pure*)
            installPurePrompt
            ;;
        spaceship*)
            installSpaceshipPrompt
            ;;
        starship*)
            installStarshipPrompt
            ;;
    esac
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Installs Spaceship Prompt
installSpaceshipPrompt() {
    isZsh
    if [ $? -ne 0 ]; then return; fi

    subsection "Spaceship Prompt"

    ask "Install Spaceship Prompt" 1
    if [ $RESPONSE != true ]; then return; fi

    echo -e "\nInstalling RobotoMono Powerline font\n"
    brew install font-roboto-mono-for-powerline

    echo -e "Installing Spaceship Prompt\n"
    npm install -g spaceship-prompt

    SPACESHIP_PROMPT_INSTALLED=true
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Installs Starship Prompt
installStarshipPrompt() {
    subsection "Starship Prompt"

    ask "Install Starship Prompt" 1
    if [ $RESPONSE != true ]; then return; fi

    echo -e "\nInstalling FiraCode Nerd font\n"
    brew install font-fira-code-nerd-font

    echo -e "Installing Starship Prompt\n"
    brew install starship

    # Add to Shell's .rc
    echo -e "\n# Starship Prompt" >> ${SHELL_RC_FILE}
    echo "eval \"\$(starship init ${DEFAULT_SHELL})\"" >> ${SHELL_RC_FILE}

    STARSHIP_PROMPT_INSTALLED=true
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Installs VS Code Extensions
# - $1 argument: path to file listing VS Code extensions
installVSCodeExt() {
    subsection "Installing VS Code Extensions"

    while read -r extension; do
        echo "Installing ${extension}"
        code --install-extension ${extension}
    done < ${1}
    sleep 2
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Install Developer XCode CLI Tools
installXcodeCLITools() {
    subsection "Installing XCode Developer CLI Tools"
    xcode-select --install
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is Default Shell Bash?
isBash() {
    if [ "${DEFAULT_SHELL}" = "bash" ]; then
        return
    fi
    false
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is Default Shell Zsh?
isZsh() {
    if [ "${DEFAULT_SHELL}" = "zsh" ]; then
        return
    fi
    false
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Logs
# - The first line redirects and appends (-a) everything from the standard output stream to the log file and prints it to the screen.
# - The second line redirects the standard error to log file.
loggers() {
    exec 1>> >(tee -a setup.log)
    exec 2>> error.log
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run Pre-flight Checks
# - Is masOS supported?
preFlightChecks() {
    if [ ! -z $OS_UNSUPPORTED ]; then
        message "error" "Unsupported macOS Version"
        exit 1
    fi
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Completion Messages
# - Display Nicely Formatted Message
message() {
    if [ "$1" = "info" ]; then
        local msg="\n\n${EMOJI_INFO} - ${RED}${2}${NC}\n\n\n"
    elif [ "$1" = "warning" ]; then
        local msg="\n\n${EMOJI_WARNING} - ${RED}${2}${NC}\n\n\n"
    elif [ "$1" = "fail" ]; then
        local msg="\n\n${EMOJI_FAIL} - ${RED}${2}${NC}\n\n\n"
    elif [ "$1" = "error" ]; then
        local msg="\n\n${EMOJI_ERROR} - ${RED}${2}${NC}\n\n\n"
    else
        local msg="\n\n${EMOJI_CHECKMARK} - ${GREEN}${1}${NC}\n\n\n"
    fi

    shift
    printf "${msg}"
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Restore Backups
# - Copies over Time Machine backups
restoreBackups() {
    if [ $RESTORE_BACKUP != true ]; then
        echo -e "\nNot restoring backup\n"
        return;
    fi

    subsection "Time Machine Backups"

    ask "Restore Time Machine Backups" 1
    if [ $RESPONSE != true ]; then return; fi

    . ./bin/restore_backup.sh '/Volumes/Backups/'
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Section Header
section() {
    title=$(echo ${1} | tr [:lower:] [:upper:])
    echo -e "\n\n|- ${title}\n================================================================================\n"
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Determine and Set Default Shell
setDefaultShell() {
    subsection "Default Shell"

    isZsh
    if [ $? -ne 0 ]; then return; fi

    echo "The default interactive shell is now Zsh"
    ask "Update your account to use Bash instead"
    if [ $RESPONSE != true ]; then return; fi

    chsh -s /bin/bash
    echo "Bash set as system default"
    echo "export BASH_SILENCE_DEPRECATION_WARNING=1" >> ${BASH_PROFILE_PATH}
    echo "If you wish to revert to using Zsh, execute the command 'chsh /bin/zsh'"
    DEFAULT_SHELL="bash"
    SHELL_PROFILE_FILE="${BASH_PROFILE_PATH}"
    SHELL_RC_FILE="${BASH_RC_PATH}"
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set Global Git Default Branch to 'main' or passed argument
setGitDefaultBranch() {
    git config --global init.defaultBranch ${1:-'main'}
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Sets Mac Settings
setSettings() {
    if [ $SET_DEFAULT_SYSTEM_PREFERENCES != true ]; then return; fi

    subsection "Default Mac Settings"

    ask "Set Mac Settings"
    if [ $RESPONSE != true ]; then return; fi

    . ./bin/settings_defaults.sh
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Subs Section Header
subsection() {
    title=$(echo ${1} | tr [:lower:] [:upper:])
    echo -e "\n\n| ${title}\n--------------------------------------------------------------------------------\n"
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Sources
# - General Helper Functions
# - Global Environment Variables
# - CLI Argument Options
source_libs() {
    for file in ./lib/*; do
        source $file
    done
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Update Mac OS
updateMacOS() {
    subsection "Running Updates"

    ask "Update macOS" 1
    if [ $RESPONSE != true ]; then return; fi

    subsection "Updating macOS"
    softwareupdate -ia --verbose
    message "Done running updates"
    sleep 2
}

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Welcome Message
welcome() {
    m[0]="\n${YELLOW}  ___  ____  ____  __  __  ____\n"
    m[1]="/ __)( ___)(_  _)(  )(  )(  _ \\ \n"
    m[2]="\__ \ )__)   )(   )(__)(  )___/\n"
    m[3]="(___/(____) (__) (______)(__)\n${NC}\n"

    echo -e "${m[@]}"
    echo -e "This script will automate a lot of processes.\n"
    echo -e "Though not recommended interrupting, exit this script at any time with Ctrl-C.\n"
    sleep 2
    echo -e "Press Ctrl-C to STOP ${EMOJI_STOP} now if you ${RED}don't${NC} wish to proceed. Starting in 5 seconds...\n"
    sleep 5
    echo -e "Starting automated install:\n"
    echo -e "Type: ${SETUP_TYPE}\n"
    echo -e "Mode: $(if [ -n "${MODE}" ]; then echo "${MODE}"; else echo "N/A"; fi)\n"
    echo -e "\n"
}
