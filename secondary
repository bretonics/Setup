#!/usr/bin/env bash

echo "================================================================================"
echo "| Script:    $0"
echo "| Run by:    `whoami`"
echo "| On:        `date`"
echo "| PID:       $$"
echo "================================================================================"
echo ""
echo ""
echo ""


#--------------------------------------------------------------------------------
# PERSONALIZE SETUP
echo "Running personalizations"
printf "================================================================================\n\n"

cd ~
printf "\nCurrently at `pwd`\n"

printf "\nDownloading Submodules\n"
git pull --recurse-submodules

printf "\nCopying .bash_profile\n"
cp ./files/bash/profile/.bash_profile ~/

printf "\nCopying .bashrc\n"
cp ./files/bash/bashrc/.bashrc ~/

printf "\nCopying .bash_functions\n"
cp ./files/bash/functions/.bash_functions ~/

printf "\nInitializing crontab\n"
crontab ./files/crontab/crontab

printf "\nSourcing .bash_profile\n"
source ~/.bash_profile

printf "\nInitializing crontab\n"
crontab ./crontab

printf "\nSymlinking Atom config directory\n"
rm -rf ~/.atom
ln -sf ~/Dropbox/Apps/Atom ~/.atom

printf "\nReducing Dock autohide animation\n"
defaults write com.apple.dock autohide-time-modifier -float 0.25; killall Dock

printf "\nRemove Dock Delay for Auto-Hide & Auto-Show\n"
defaults write com.apple.Dock autohide-delay -float 0 && killall Dock

printf "\nCreating GPG Key\n"
gpg --gen-key
GPGkey=$(gpg --list-secret-keys --keyid-format LONG | sed -nE 's/sec.*rsa2048\/([a-zA-Z0-9]+).*/\1/p')

printf "\nConfiguring GPG Key with resources\n"
git config --global user.signingkey ${GPGkey}
gpg --armor --export ${GPGkey} | pbcopy
unset GPGkey

printf "\n\nDone running personalizations.\n\n\n"
sleep 2

#--------------------------------------------------------------------------------
# UPDATES
echo "Running updates"
printf "================================================================================\n\n"

echo "Updating macOS"
softwareupdate -ia --verbose

echo "Updating Atom"
apm upgrade -c false

printf "\n\nDone running updates.\n\n\n"
sleep 2


echo "================================================================================"
echo "| Secondar setup has FINISHED"
echo "================================================================================"
echo ""
