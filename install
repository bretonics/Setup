#!/usr/bin/env bash

#--------------------------------------------------------------------------------
# UTILS
GREEN="\033[0;32m"
RED="\033[0;31m"
NC="\033[0m"  # Color reset

# The first line redirects and appends (-a) everything from the standard ouput stream to the logfile and prints it to the screen.
# The second line redirects the standard error to log file.
exec 1> >(tee -a setup.log)
exec 2> error.log

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Functions

# Get Apple ID Username (email)
getAccountId() {
    defaults read MobileMeAccounts Accounts | sed -n -e 's/.*AccountID = \"\(.*\)\"\;/\1/p'
}

# Display Nicely Formatted Message
message() {
    if [ "$2" = "fail" ]; then
        local msg="${RED}\n\n‚ùå  ${1}${NC}\n\n\n"
    elif [ "$2" = "error" ]; then
        local msg="${RED}\n\nüìõ  ${1}${NC}\n\n\n"
    else
        local msg="${GREEN}\n\n‚úÖ  ${1}${NC}\n\n\n"
    fi

    shift
    printf "${msg}"
}

#--------------------------------------------------------------------------------
# START
echo ""
echo "INFO: This script will automate a lot of processes."
echo "Though not recommended to interrupt, exit this script at any time with Ctrl-C."
echo "Press Ctrl-C to STOP now. You have 5 seconds"
sleep 5
echo "Starting automated installs...."

echo ""
echo ""
echo "================================================================================"
echo "| Script:    $0"
echo "| Run by:    `whoami`"
echo "| On:        `date`"
echo "| PWD:       `pwd`"
echo "| PID:        $$"
echo "================================================================================"
echo ""
echo ""
echo ""

#--------------------------------------------------------------------------------
# SYSTEM SETUP
echo "Installing Xcode developer tools"
printf "================================================================================\n\n"

xcode-select --install

message "Done installing Xcode developer tools."
sleep 2

echo "Installing Homebrew"
printf "================================================================================\n\n"

/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" </dev/null

printf "\n\nAdding taps...\n\n"
brew_taps=(brewsci/bio brewsci/science homebrew/bundle caskroom/versions)
for tap in ${brew_taps[@]}; do
    brew tap $tap
done

message "Done installing Homebrew."
sleep 2

#--------------------------------------------------------------------------------
# INSTALL ALL DESIRED FORMULAE
echo "Installing formulae"
printf "================================================================================\n\n"

formulae="src/formulae.txt"
while read -r formula; do
    echo "Installing $formula"
    brew install $formula
    echo ""
done < $formulae

message "Done installing formulas."
sleep 2

#--------------------------------------------------------------------------------
# INSTALL ALL DESIRED CASKS (3RD PARTY APPS)
echo "Installing casks"
printf "================================================================================\n\n"

casks="src/casks.txt"
while read -r cask; do
    echo "Installing $cask"
    brew cask install $cask
    echo ""
done < $casks

message "Done installing casks."
sleep 2

#--------------------------------------------------------------------------------
# INSTALL CORE APPLICATIONS
echo "Installing core resources"
printf "================================================================================\n\n"

echo "Installing global NPM packages"
# brew link --force node@10  # link keg-only package if installing node v10
npm install -g @angular/cli bunyan eslint aws-azure-login

#--------------------------------------------------------------------------------
# CLEANUP
echo "Cleaning up"
printf "================================================================================\n\n"

echo "Turning OFF sending brew analytics"
brew analytics off

echo "Cleaning up Homebrew downloads and caches"
brew cleanup -s # remove older versions in cellar + old downloads-cache
rm -rf $(brew --cache) # delete all

message "Done cleaning up."
sleep 2

#--------------------------------------------------------------------------------
# INSTALL MAC APPS
echo "Installing apps from Mac App Store"
printf "================================================================================\n\n"

mas signin --dialog $(getAccountId)

apps="src/apps.txt"
while read -r line; do
    app=$(echo $line | cut -f1 -d" ")
    echo "Installing $app"
    mas install $app
    echo ""
done < $apps

message "Done installing Mac App Store apps."
sleep 2


echo "Now go login to accounts (Dropbox, emails, etc...) and then run secondary installs, \`bash secondary\`."
echo ""
echo ""
echo "================================================================================"
echo "| Primary setup has FINISHED"
echo "================================================================================"
echo ""
