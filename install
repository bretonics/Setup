#!/usr/bin/env bash

#===============================================================================================
# PRE-LAUNCH SETUP
#===============================================================================================

#-----------------------------------------------------------------------------------------------
# LOGS

# The first line redirects and appends (-a) everything from the standard ouput stream to the logfile and prints it to the screen.
# The second line redirects the standard error to log file.
exec 1> >(tee -a setup.log)
exec 2> error.log

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# GLOBALS

EMOJI_CHECKMARK="\xe2\x9c\x85"
EMOJI_ERROR="\xe2\x9b\x94\xef\xb8\x8f"
EMOJI_FAIL="\xe2\x9d\x8c"
EMOJI_INFO="\xe2\x84\xb9\xef\xb8\x8f"
EMOJI_WARNING="\xe2\x9b\x94\xef\xb8\x8f"
BREW_CASKS="./src/casks.txt"
BREW_FILE="./src/Brewfile"
BREW_FORMULAE="./src/formulae.txt"
BREW_TAPS="./src/taps.txt"
MAC_APPS="./src/apps.txt"
SETUP_TYPE="full"  # DEFAULT full setup: installS everything in Brewfile and secondary

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# CLI ARGUMENT OPTIONS

print_option() {
    printf "\t%s\t%s\n" "${1}" "${2}" | expand -t 4,25
}

# Usage Message
usage() {
    echo -e "\nUsage: $0 [OPTIONS] [Brewfile]\n"
    echo -e "\nOptions:\n"
    print_option "-F" "Full install"
    print_option "-E" "Essentials install"
    print_option "-i [full|essentials]" "More explicit intall type declaration"
    print_option "-s" "Run secondary installation. Default: true"
    print_option "-h" "Prints this usage message"
    echo -e "\nArguments:\n"
    print_option "Brewfile" "Path to Brew bundle file. Default: '${BREW_FILE}'"
    echo -e "\n"
    exit 1
}

# Handle Options
while getopts ":EFhi:s" OPTION; do
    case "${OPTION}" in
    E)
        SETUP_TYPE="essentials"
        ;;
    F)
        # Default SETUP_TYPE globally set to "full"
        RUN_SECONDARY=true
        ;;
    i)
        SETUP_TYPE=${OPTARG}
        case "${SETUP_TYPE}" in
            full|essentials)
                ;;
            *)
                echo "Incorrect option provided for -i: ${OPTARG}"
                usage
                ;;
        esac
        ;;
    s)
        RUN_SECONDARY=true
        ;;
    \?)
        echo "Invalid Option: -${OPTARG}"
        usage
        ;;
    :)
        echo "Invalid Option: -${OPTARG} requires an argument"
        usage
        ;;
    h | *)
        usage
        ;;
    esac
done

shift $((OPTIND -1)) # remove options already handled by getopts from $@

if [ $# -ne 0 ]; then
    BREW_FILE=${1}
    echo "Using Brewfile '${BREW_FILE}"
fi

# Output Color Configs
GREEN="\033[0;32m"
RED="\033[0;31m"
NC="\033[0m"

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Functions

# Get Apple ID Username (email)
getAccountId() {
    defaults read MobileMeAccounts Accounts | sed -n -e 's/.*AccountID = \"\(.*\)\"\;/\1/p'
}

# Display Nicely Formatted Message
message() {
    if [ "$1" = "info" ]; then
        local msg="${RED}\n\n${EMOJI_INFO}  ${2}${NC}\n\n\n"
    elif [ "$1" = "warning" ]; then
        local msg="${RED}\n\n${EMOJI_WARNING}  ${2}${NC}\n\n\n"
    elif [ "$1" = "fail" ]; then
        local msg="${RED}\n\n${EMOJI_FAIL} ${2}${NC}\n\n\n"
    elif [ "$1" = "error" ]; then
        local msg="${RED}\n\n${EMOJI_ERROR}  ${2}${NC}\n\n\n"
    else
        local msg="${GREEN}\n\n${EMOJI_CHECKMARK}  ${1}${NC}\n\n\n"
    fi

    shift
    printf "${msg}"
}

#===============================================================================================
# START RUNNING SETUP
#===============================================================================================
echo ""
echo "This script will automate a lot of processes."
echo "Though not recommended to interrupt, exit this script at any time with Ctrl-C."
echo -e "\nPress Ctrl-C to STOP now if you don't wish to proceed. You have 5 seconds..."
sleep 5
echo "Starting automated install: $(echo ${SETUP_TYPE} | tr [:lower:] [:upper:])"
sleep 2

echo ""
echo ""
echo "================================================================================"
echo "| Script:    $0"
echo "| Run by:    `whoami`"
echo "| On:        `date`"
echo "| PWD:       `pwd`"
echo "| PID:       $$"
echo "|"
echo "| Running '${SETUP_TYPE}' install..."
echo "================================================================================"
echo ""
echo ""
echo ""

#-----------------------------------------------------------------------------------------------
# SYSTEM SETUP
echo "INSTALLING XCODE DEVELOPER TOOLS"
printf "================================================================================\n\n"

xcode-select --install

message "Done installing Xcode developer tools."
sleep 2

echo "INSTALLING HOMEBREW"
printf "================================================================================\n\n"

/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" </dev/null

message "Done installing Homebrew."
sleep 2

#-----------------------------------------------------------------------------------------------
# FULL INSTALL - INSTALL ALL FORMULAE, TAPS, AND MAC APPS
if [ "$SETUP_TYPE" = "full" ]; then
    echo "INSTALLING EVERYTHING IN '${BREW_FILE}'"
    printf "================================================================================\n\n"
    brew bundle --file ${BREW_FILE}

#-----------------------------------------------------------------------------------------------
# ESSENTIALS INSTALL
elif [ "$SETUP_TYPE" = "essentials" ]; then
    echo "INSTALLING HOMEBREW TAPS, FORMULAE, AND CASKS"
    printf "================================================================================\n\n"

    echo "Adding Homebrew Taps"
    echo -e "--------------------------------------------------------------------------------\n"
    while read -r tap; do
        echo "Adding tap $tap"
        brew tap $tap
    done < $BREW_TAPS
    message "Done adding Homebrew taps."
    sleep 2

    echo "Installing Homebrew Formulae"
    echo -e "--------------------------------------------------------------------------------\n"
    while read -r formula; do
        echo "Installing $formula"
        brew install $formula
        echo ""
    done < $BREW_FORMULAE
    message "Done installing Homebrew formulae."
    sleep 2

    echo "Installing Casks (3rd party apps)"
    echo -e "--------------------------------------------------------------------------------\n"
    while read -r cask; do
        echo "Installing $cask"
        brew cask install $cask
        echo ""
    done < $BREW_CASKS
    message "Done installing casks."
    sleep 2

    echo "Installing Apps From Mac App Store"
    echo -e "--------------------------------------------------------------------------------\n"
    mas signin --dialog $(getAccountId)

    while read -r line; do
        app=$(echo $line | cut -f1 -d" ")
        echo "Installing $app"
        mas install $app
        echo ""
    done < $MAC_APPS
    message "Done installing Mac App Store apps."
    sleep 2

#-----------------------------------------------------------------------------------------------
# ERROR: INSTALL TYPE NOT SUPPORTED
else
    msg error "Something is terribly wrong. ${SETUP_TYPE} should have never passed."
    exit 1
fi

#-----------------------------------------------------------------------------------------------
# INSTALL CORE APPLICATIONS
echo "INSTALLING CORE RESOURCES"
printf "================================================================================\n\n"

echo "Installing Global NPM Packages"
echo -e "--------------------------------------------------------------------------------\n"
# brew link --force node@10  # link keg-only package if installing node v10
npm install -g @angular/cli bunyan eslint aws-azure-login

#-----------------------------------------------------------------------------------------------
# CLEANUP
echo "CLEANING UP"
printf "================================================================================\n\n"

echo "Turning OFF sending brew analytics"
brew analytics off

echo "Cleaning up Homebrew downloads and caches"
brew cleanup -s # remove older versions in cellar + old downloads-cache
rm -rf $(brew --cache) # delete all

message "Done cleaning up."
sleep 2

#-----------------------------------------------------------------------------------------------
# COMPLETED MESSAGE
echo ""
echo ""
echo "================================================================================"
echo "| Primary setup has FINISHED"
echo "================================================================================"
echo ""
echo ""
echo ""

#-----------------------------------------------------------------------------------------------
# SECONDARY INSTALL
if [ "$RUN_SECONDARY" = true ]; then 
    echo "Runnig Secondary Install"
    echo -e "--------------------------------------------------------------------------------\n"
    bash ./secondary
else 
    echo "Now go login to accounts (Dropbox, emails, etc...) and then run secondary installs, \`bash secondary\`."
    echo ""
fi