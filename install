#!/usr/bin/env bash

#===============================================================================================
# PRE-LAUNCH SETUP
#===============================================================================================

#-----------------------------------------------------------------------------------------------
# LOGS
# - The first line redirects and appends (-a) everything from the standard ouput stream to the logfile and prints it to the screen.
# - The second line redirects the standard error to log file.
exec 1> >(tee -a setup.log)
exec 2> error.log

#-----------------------------------------------------------------------------------------------
# SOURCES
# - General Helper Functions
# - Global Environment Variables
# - CLI Argument Options
for file in ./bin/*; do 
    source $file
done

#-----------------------------------------------------------------------------------------------
# HANDLE CLI OPTIONS
handle_getopts "$@"

#===============================================================================================
# START RUNNING SETUP
#===============================================================================================
welcome_message

echo ""
echo ""
echo "================================================================================"
echo "| Script:    $(basename "$0")"
echo "| User:      `whoami`"
echo "| Date:      `date`"
echo "| PWD:       `pwd`"
echo "| PID:       $$"
echo "|"
echo "| Running '${SETUP_MODE}' install..."
echo "|     - Brewfile: ${BREW_FILE}"
echo "|     - Secondary: $(if [ ${RUN_SECONDARY} = "true" ]; then echo "Yes"; else echo "No"; fi)"
echo "|"
echo "================================================================================"
echo ""
echo ""
echo ""

#-----------------------------------------------------------------------------------------------
# SYSTEM SETUP
echo "INSTALLING XCODE DEVELOPER TOOLS"
printf "================================================================================\n\n"

xcode-select --install

message "Done installing Xcode developer tools."
sleep 2

echo "INSTALLING HOMEBREW"
printf "================================================================================\n\n"

/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" </dev/null

message "Done installing Homebrew."
sleep 2

#-----------------------------------------------------------------------------------------------
# FULL INSTALL
# - Install all Formulae, Taps, and Mac Apps specified by $BREW_FILE 
if [ "$SETUP_MODE" = "FULL" ]; then
    echo "INSTALLING EVERYTHING IN '${BREW_FILE}'"
    printf "================================================================================\n\n"
    brew bundle --file ${BREW_FILE}

#-----------------------------------------------------------------------------------------------
# ESSENTIALS INSTALL
# - Homebrew Taps specified by $BREW_TAPS
# - Homebrew Forlumae specified by $BREW_FORMULAE
# - Homebrew Casks specified by $BREW_CASKS
# - applications from Mac App Store specified by $MAC_APPS
elif [ "$SETUP_MODE" = "ESSENTIALS" ]; then
    echo "INSTALLING HOMEBREW TAPS, FORMULAE, AND CASKS"
    printf "================================================================================\n\n"

    echo "Adding Homebrew Taps"
    echo -e "--------------------------------------------------------------------------------\n"
    while read -r tap; do
        echo "Adding tap $tap"
        brew tap $tap
    done < $BREW_TAPS
    message "Done adding Homebrew taps."
    sleep 2

    echo "Installing Homebrew Formulae"
    echo -e "--------------------------------------------------------------------------------\n"
    while read -r formula; do
        echo "Installing $formula"
        brew install $formula
        echo ""
    done < $BREW_FORMULAE
    message "Done installing Homebrew formulae."
    sleep 2

    echo "Installing Casks (3rd party apps)"
    echo -e "--------------------------------------------------------------------------------\n"
    while read -r cask; do
        echo "Installing $cask"
        brew cask install $cask
        echo ""
    done < $BREW_CASKS
    message "Done installing casks."
    sleep 2

    echo "Installing Apps From Mac App Store"
    echo -e "--------------------------------------------------------------------------------\n"
    mas signin --dialog $(getAccountId)

    for app in $(sed -E -n 's/^([0-9]+)(.*)/\1/p' ${MAC_APPS}); do
        echo "Installing $app"
        mas install $app
        echo ""
    done
    message "Done installing Mac App Store apps."
    sleep 2

#-----------------------------------------------------------------------------------------------
# ERROR: INSTALL MODE NOT SUPPORTED
else
    msg error "Something is terribly wrong. ${SETUP_MODE} should have never passed."
    exit 1
fi

#-----------------------------------------------------------------------------------------------
# INSTALL CORE APPLICATIONS
echo "INSTALLING CORE RESOURCES"
printf "================================================================================\n\n"

echo "Installing Global NPM Packages"
echo -e "--------------------------------------------------------------------------------\n"
# brew link --force node@10  # link keg-only package if installing node v10
npm install -g @angular/cli bunyan eslint aws-azure-login

#-----------------------------------------------------------------------------------------------
# CLEANUP
echo "CLEANING UP"
printf "================================================================================\n\n"

echo "Turning OFF sending brew analytics"
brew analytics off

echo "Cleaning up Homebrew downloads and caches"
brew cleanup -s # remove older versions in cellar + old downloads-cache
rm -rf $(brew --cache) # delete all

message "Done cleaning up."
sleep 2

#-----------------------------------------------------------------------------------------------
# COMPLETED MESSAGE
echo ""
echo ""
echo "================================================================================"
echo "| Primary setup has FINISHED"
echo "================================================================================"
echo ""
echo ""
echo ""

#-----------------------------------------------------------------------------------------------
# SECONDARY INSTALL
if [ "$RUN_SECONDARY" = true ]; then 
    echo "Runnig Secondary Install"
    echo -e "--------------------------------------------------------------------------------\n"
    # Execute secondary script in the current shell without forking a sub shell
    . ./secondary
else 
    echo "Now go login to accounts (Dropbox, emails, etc...) and then run secondary installs, \`bash secondary\`."
    echo ""
fi